#compdef ml

# Main dispatcher
_ml()
{

  local curcontext="$curcontext" state line arguments opt descript arg w optState cmd
  local -A opt_args optT cmdT

  #echo ""                >> $HOME/t/ml.log
  #echo "Here in _ml() 1" >> $HOME/t/ml.log

  arguments=(
    '(-h --help)'{--help,-h}'[display usage info]'
    '(- *)'{--version,--v,-V}'[module command version and configuration options]'
    '(-t --terse)'{--terse,-t}'[display avail and list output in short format]'
    '(-d --default)'{--default,-d}'[List default modules only when used with avail]' 
    '(-D --debug)'{--debug,-D}'[Send program tracing information to stderr]'
    '(-q --quiet)'{--quiet,-q}'[disable verbose messages]'
    )

  for arg in $arguments; do
    opt=${${arg#*\)}%%\[*}
    descript=${${arg#*\[}%%\]*}
    optT[$opt]=$descript
  done  

  _ml_loaded_modules_negated
  _ml_available_modules

  local _ml_cmds

  _ml_cmds=(
    "help:print the usage of each sub-command"
    "unload:remove a module from the shell environment"
    "rm:remove a module from the shell environment"
    "swap:swap loaded a loaded module with another module"
    "spider:List all possible modules"
    "show:display information about a module"
    "list:list loaded modules"
    "avail:list all available modules"
    "use:add a directory to MODULEPATH"
    "unuse:remove a directory from MODULEPATH"
    "purge:unload all loaded modules"
    "refresh:refresh all non-persistent components of loaded modules"
    "whatis:display module information"
    "keyword:search for a given keyword in modules"
  )

  for i in $_ml_cmds; do
    cmd=${i%%:*}
    cmdT[$cmd]=1
  done
  

  #  previous        current      choices         pattern
  # ---------------------------------------------------------
  # ml -o1           <nothing>     cmds             10
  #                    A*          availM
  # ---------------------------------------------------------
  # ml -o1             -           -opts            11
  #                                -loadM
  # ---------------------------------------------------------
  # ml -o1 -M1       <nothing>     availM           20
  #                    A*          
  # ---------------------------------------------------------
  # ml -o1 -M1         -           -loadM           21
  # ---------------------------------------------------------
  # ml -o1  M1       <nothing>     availM           20
  #                    A*          
  # ---------------------------------------------------------
  # ml -o1  M1         -           -loadM           21
  # ---------------------------------------------------------
  # ml -o1  cmd        *           cmd-specific     30
  # ---------------------------------------------------------
  
  cmd=""

  pattern=10

  for ((i=2; i < $#words; i++ )); do
    w=$words[$i]
    firstC=$w[1]
    #echo "\$words[$i]: \"$w\" firstC: \"$firstC\"" >> $HOME/t/ml.log
    if   [ -n "$optT[$w]"  ]; then 
      pattern=10
    elif [ "$firstC" = "-" ]; then 
      pattern=20
      break;
    elif [ "$cmdT[$w]" = 1 ]; then
      pattern=30
      cmd=$w
      break;
    fi
  done

  #echo "first pattern: $pattern" >> $HOME/t/ml.log
  #echo "CURRENT: $CURRENT"      >> $HOME/t/ml.log

  w=$words[$CURRENT]
  firstC=$w[1]
  #echo "\$words[CURRENT]: \"$w\" firstC: \"$firstC\"" >> $HOME/t/ml.log

  if [ "$firstC" = "-" ]; then
    ((pattern++))
  fi
  #echo "pattern: $pattern " >> $HOME/t/ml.log

  case $pattern in
    10)
      cmdsPavail=($_ml_cmds $_available_modules)
      #echo "pattern 10 " >> $HOME/t/ml.log
      #echo "describe " >> $HOME/t/ml.log
      _describe -t commands 'ml command' cmdsPavail  || compadd "$@"
      ;;
    11)
      #echo "pattern 11 " >> $HOME/t/ml.log
      _arguments -s              \
        $arguments               \
        $_loaded_modules_negated 
      ;;
    20)
      #echo "pattern 20 " >> $HOME/t/ml.log
      _describe -t commands 'ml command' _available_modules  || compadd "$@"
      ;;
    21)
      #echo "pattern 21 " >> $HOME/t/ml.log
      compadd "$@" -a -- _loaded_modules_negated
      ;;
    30|31)
      case $cmd in
        add) cmd="load";;
        rm) cmd="unload";;
        display) cmd="show";;
      esac
        
      #echo "pattern 30/31" >> $HOME/t/ml.log
      local update_policy
      curcontext="${curcontext%:*:*}:ml-${cmd}:"
      zstyle -s ":completion:${curcontext}:" cache-policy update_policy
      _call_function ret _ml_$cmd || _message 'no more arguments'
      ;;
  esac
}


_ml_loaded_modules_negated()
{
  _loaded_modules_negated=(${$(module -q -t list 2>&1 > /dev/null | sed ' /^ *$/d; /:$/d; s#/*$##g; s|^|-|g;')})
}

_ml_loaded_modules()
{
  _loaded_modules=(${$(module -q -t list 2>&1 > /dev/null | sed ' /^ *$/d; /:$/d; s#/*$##g;')})
}

# Fills the available modules cache
_ml_available_modules()
{
  if [[ -n $MODULEPATH ]];  then
    _available_modules=(${$(module -q -t avail 2>&1 > /dev/null | sed ' /:$/d; s#/*$##g;')})
  fi
}

# Fills the available modules cache
_ml_spider_list()
{
  _spider_list=(${$(module -q -t spider 2>&1 > /dev/null)})
}


_ml_unload()
{
  #echo "in _ml_unload" >> $HOME/t/ml.log
  _module_loaded_modules
  compadd "$@" -a -- _loaded_modules
}

_ml_help()
{
  #echo "in _ml_help" >> $HOME/t/ml.log
  _module_available_modules
  compadd "$@" -a -- _available_modules
}

_ml_swap()
{
  #echo "in _ml_swap: CURRENT: $CURRENT" >> $HOME/t/ml.log
  if [[ $words[$CURRENT-1] == "swap" ]]; then
    _module_loaded_modules
    compadd "$@" -a -- _loaded_modules
  else
    _module_available_modules
    compadd "$@" -a -- _available_modules
  fi
}

# Completion function for display|show
_ml_show()
{
  _ml_available_modules
  compadd "$@" -a -- _available_modules
}

# Completion function for use
_ml_use()
{
  _arguments -s \
    '(-a --append)'{--append,-a}'[append the directories instead of prepending]' \
    '*:directory:_files -/'    
}

# Completion function for unuse
_ml_unuse()
{
  compadd "$@" -- ${=MODULEPATH//:/ }
}

# Completion function for whatis
_ml_whatis()
{
  _module_available_modules
  compadd "$@" -a -- _available_modules
}

_ml_spider()
{
  _ml_spider_list
  compadd "$@" -a -- _spider_list
}


_ml "$@"

# Local Variables:
# mode: shell-script
# End:
